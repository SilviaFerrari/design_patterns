BEHAVIORAL design pattern

Useful when we have many algorithms to do the same thing and the
client decides the implementation at runtime. We encapsulate many
behaviors (algorithms) in multiple classes. This makes the code
easier to understand, independent and reusable.

We can select and dynamically change different algorithms
at runtime. This allows us to adapt to the requirements.
Helps make the code scalable and maintainable over time.


COMPONENTS:

STRATEGY --> interface or abstract class that defines
        the interface common to all algorithms.

CONCRETE STRATEGY --> classes that implement the interface
        defined by the Strategy. Each concrete strategy
        provides an implementation of the algorithm.

CONTEXT --> class that encapsulates the data and defines
        the interface to access the algorithms.