STRUCTURAL design pattern

It allows you to modify the behavior of a run time object.
You can do this by creating a set of decorator classes used to contain
concrete classes. Each decorator adds a specific feature
to the component, and you can use many decorators to create many combinations.
Particularly useful when we have many possible combinations that
generate a massive amount of subclasses.

A decorator is used when we want to add extra features without
changing the supporting structure. Or to avoid having too many classes
for all the possible combinations. Finally, it is useful to extend the code
without modifying the existing one, respecting the open close (OCP).

COMPONENTS:

COMPONENT --> defines the interface for objects that have many responsibilities
        to be added dynamically. Contains the methods common to everything.

CONCRETE COMPONENT --> basic concrete component that extends the interface.
        Defines the object to which to add the various features.

DECORATOR --> abstract class that implements the interface and that
        contains the particular feature that we want to add.

CONCRETE DECORATORS --> concrete decorator classes that
        actually add the various specific features.